package com.PanCard.ema.Util;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import com.PanCard.ema.Model.CheckSumRequestModel;
import com.PanCard.ema.Model.MandateVerifyDtlsPanFail;
import com.PanCard.ema.ResponseModel.FinalResponse;

@Component
public class CheckSumUtil {

	@Autowired
	private CryptograpyUtil enc;

	private final static Logger logger = Logger.getLogger(CheckSumUtil.class);
	
	public boolean MandaterequestCheckSumValidation(String checksum, CheckSumRequestModel model, String bankcert,
			String pass) {
		boolean flag = false;
		try {
			String hashChecksum = createChecksumReqHash(new CheckSumRequestModel(model.getDebtorAccNo(),
					model.getFrstColltnDt(), model.getFnlColltnDt(), model.getColltnAmt(), model.getMaxAmt()));

			logger.info("Checksum Value generated:" + hashChecksum);
			boolean verifyChecksum = false;
			String decodedChechsum = "";
			try {
				decodedChechsum = URLDecoder.decode(checksum, "UTF-8");
			} catch (UnsupportedEncodingException e) {
				logger.info("Exception occured while decoding: " + e.getMessage());
			}
			String checkSumDecipher = enc.decryptText(decodedChechsum, bankcert, pass);

			logger.info("chechsum given by npci: " + checkSumDecipher);
			logger.info("chechsum generated by code: " + hashChecksum);
			if (hashChecksum != null) {
				verifyChecksum = hashChecksum.equals(checkSumDecipher);
				logger.info("Verify checksum status:" + verifyChecksum);
			}
//			verifyChecksum=false;///undu after testing
			return verifyChecksum;
		} catch (Exception e) {
			logger.debug("Exception occured while generating checksum: " + e.getMessage());
		}
		return flag;
	}
	
	
	public String createChecksumReqHash(CheckSumRequestModel checksumReqModel) {
		logger.info("Generating checksum");
		String normalChecksum = "";
		String hashChecksum = null;
		if (checksumReqModel.getColltnAmt().isEmpty() && checksumReqModel.getFnlColltnDt().isEmpty()) {
			normalChecksum = checksumReqModel.getDebtorAccNo() + "|" + checksumReqModel.getFrstColltnDt() + "|||"
					+ checksumReqModel.getMaxAmt();
		} else if (checksumReqModel.getMaxAmt().isEmpty() && checksumReqModel.getFnlColltnDt().isEmpty()) {
			normalChecksum = checksumReqModel.getDebtorAccNo() + "|" + checksumReqModel.getFrstColltnDt() + "||"
					+ checksumReqModel.getColltnAmt() + "|";
		} else if (checksumReqModel.getColltnAmt().isEmpty()) {
			normalChecksum = checksumReqModel.getDebtorAccNo() + "|" + checksumReqModel.getFrstColltnDt() + "|"
					+ checksumReqModel.getFnlColltnDt() + "||" + checksumReqModel.getMaxAmt();
		} else if (checksumReqModel.getMaxAmt().isEmpty()) {
			normalChecksum = checksumReqModel.getDebtorAccNo() + "|" + checksumReqModel.getFrstColltnDt() + "|"
					+ checksumReqModel.getFnlColltnDt() + "|" + checksumReqModel.getColltnAmt() + "|";
		} else if (checksumReqModel.getDebtorAccNo().isEmpty()) {
			normalChecksum = checksumReqModel.getFrstColltnDt() + "|" + checksumReqModel.getFnlColltnDt() + "|"
					+ checksumReqModel.getColltnAmt() + "|" + checksumReqModel.getMaxAmt() + "|";
		}
		hashChecksum = sha2CheckSum(normalChecksum);
		return hashChecksum;
	}
	
	public String sha2CheckSum(String hashSrc) {
		logger.info("Hashing checksum");
		MessageDigest md = null;
		try {
			md = MessageDigest.getInstance("SHA-256");
		} catch (NoSuchAlgorithmException e) {
			logger.debug("Exception occured while getting instance of SHA-256");
		}
		md.update(hashSrc.getBytes());
		byte byteData[] = md.digest();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < byteData.length; i++) {
			sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
		}
		StringBuffer hexString = new StringBuffer();
		for (int i = 0; i < byteData.length; i++) {
			String hex = Integer.toHexString(0xff & byteData[i]);
			if (hex.length() == 1)
				hexString.append('0');
			hexString.append(hex);
		}
		return sb.toString();
	}
	
	
	public String signatureValidationFailed(MandateVerifyDtlsPanFail resp, String jsonWebSign) {
	    // Ensure non-null values using the ternary operator
	    String txnId = resp.getTransactionID() != null ? resp.getTransactionID() : "";
	    String mndtValidation = resp.getMandateValidation() != null ? resp.getMandateValidation() : "";
	    String acceptRefNo = resp.getMandateResponseDtl() != null && resp.getMandateResponseDtl().getAccptRefNo() != null ? resp.getMandateResponseDtl().getAccptRefNo() : "";
	    String dbtrAccType = resp.getMandateResponseDtl() != null && resp.getMandateResponseDtl().getDbtrAcctType() != null ? resp.getMandateResponseDtl().getDbtrAcctType() : "";
	    String dbtrIfsc = resp.getMandateResponseDtl() != null && resp.getMandateResponseDtl().getDbtrIfsc() != null ? resp.getMandateResponseDtl().getDbtrIfsc() : "";
	    String errorCode = resp.getMandateRejectDtl() != null && resp.getMandateRejectDtl().getErrorCode() != null ? resp.getMandateRejectDtl().getErrorCode() : "";
	    String errorDesc = resp.getMandateRejectDtl() != null && resp.getMandateRejectDtl().getErrorDesc() != null ? resp.getMandateRejectDtl().getErrorDesc() : "";
	    String panValidation = resp.getPanValidation() != null ? resp.getPanValidation() : "";
	    String successCode = resp.getPanVerifyDtl() != null && resp.getPanVerifyDtl().getSuccessCode() != null ? resp.getPanVerifyDtl().getSuccessCode() : "";
	    String reasonCode = resp.getMandateRejectDtl() != null && resp.getMandateRejectDtl().getReasonCode() != null ? resp.getMandateRejectDtl().getReasonCode() : "";
	    String reasonDesc = resp.getMandateRejectDtl() != null && resp.getMandateRejectDtl().getReasonDesc() != null ? resp.getMandateRejectDtl().getReasonDesc() : "";
	    String panReasonCode = reasonCode; 
	    String panErrorCode = errorCode;   

	    String checksum = txnId + "|" + mndtValidation + "|" + acceptRefNo + "|" + dbtrAccType + "|" + dbtrIfsc + "|"
	            + reasonCode + "|" + reasonDesc + "|" + errorCode + "|" + errorDesc + "|" + panValidation + "|"
	            + successCode + "|" + panReasonCode + "|" + panErrorCode + "|" + jsonWebSign;

	    logger.info("Checksum value before hashing: " + checksum);
	    logger.info("Checksum value after hashing: " + sha2CheckSum(checksum));
	    return sha2CheckSum(checksum);
	}



}
